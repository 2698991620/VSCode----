打印语句中的*和+:打印次数和拼接,拼接不能是数字和字符串
缩进严格
help可以告诉你函数有什么用
如果字符串中需要出现单引号或者双引号怎么办？
使用转义符号(\)对字符串中的引号进行转义:
print("Let\'sgo!")
原始字符串:
    如果打印语句中有一个"\",可以用\进行转义:
        'c:\\now'
    如果有多个"\",用原始字符串r来解决:
        r'c:\n\a'
多行字符串用三对双引号赋值
随机数:
    random模块会返回一个随机数
    首先导入模块:import random
    a=random.randint(起始,结束)
true相当于1
false相当于0
type()函数获取数据类型
isinstance():
    格式:isinstance(1,true)
a+=1
a=b=c=10
10//8-->1
5/2-->2.5
先乘除后加减有括号先算括号
not:取反
    not true-->false
优先级:
    ** > +x,-x(正负号) > *,/,//,+,- > <,<=,>,>=,==,!= >not,and,or
x,y=4,5
if x<y:
    small=x
else:
    small=y
改进版:
    small= x if x < y else y
assert-->断言,当这个关键字后面的条件为假时,系统会自动崩溃并抛出AssertionError的异常
一般来说我们可以用ta再程序中置入检查点,当需要确保程序中的某个条件一定为真才能让程序正常工作的话,assert关键字就非常有用了
a=abc
for i in a:
    print(i,end="  ")
-->a  b  c
append()方法
extend([a,b])添加多个元素用列表元素
insert(a,b)a是索引位置,b是元素
remove(a)删除a元素
del+列表名字或者索引,删除列表或者一个元素
pop默认删除最后一个
成员操作关系符:
    in,not in存在判断    例:list[1,2,[213,123],4,5]    123 in list-->false    123 in last[2]-->true
.count(a)-->a元素出现的次数
.index(a)-->a元素第一次出现的位置,.index(a,3,10)-->a元素在索引3到10中出现的位置
.reverse()-->反转参数位置,改变列表
.sort()从小到大排序,.sort(func,key)根据算法排序
.sort(reverse=True)从大到小,.sort(reverse=False)从小到大
[:]拷贝数据,不会随原列表的改变而改变,=会随着原列表的改变而改变
元祖不能改变,用(),元祖的关键是",",可以没有(),但是需要有","
8*(8)=64,8*(8,)=(8,8,8,8,8,8,8,8,8)
插入元素(用新的元祖):temp=(1,2,3,4)  temp=temp[:2]+(123,)+temp[2:]-->temp=(1,2,123,3,4)
"{0} love {1}".format("I","you")-->"I love you"    //字段用{}括起来
"{a} love {b}".format(a="I",b="you")-->"I love you"//数字参数不能在字母参数之后
%C  格式化字符及其ASXII码
%s  格式化字符串
%d  格式化整数
%o  格式化无符号八进制数
%x  格式化无符号十六进制数
%X  格式化无符号十六进制数(大写)
%f  格式化定点数,可以搞定小数点后的精度
%e  用科学计数法格式化定点数
%E  作用同%e,用科学计数法格式化定点数
%g  根据值的大小决定使用%f或者%e
%G  作用同%g,根据值的大小决定使用%f或者%e
例:"%c" "%c" % (97,98)-->a,b
格式化操作符辅助指令
m.n  m是显示的最小宽度,n是小数的后的位数
-    用于左对齐
+    在正数前面显示加号(+)
#    在八进制数前面显示零('0'),在十六进制数前面显示'0x'或者'0X'
0    显示的数字前面填充'0'取代空格
字符串转义字符含义
\''  单引号
\""  双引号
\a  发出系统提示响铃声
\b  退格符
\n  换行符
\t  横向制表符(TAB)
\v  纵向制表符字
\r  回车符
\f  换页符
\o  八进制数代表的字符
\x  十六进制代表的字符
\0  表示一个空字符
\\  反斜杠
list()可以将一个可迭代对象生成列表
a="123"  c=list(a)-->["1","2","3"]
tuple([iterable])把一个可迭代对象转换为元祖
str(obj)把obj对象转换为字符串
len()返回长度//元祖、字符串、列表
max()返回最大值
min()返回最小值
sum(iterable[,staet=0])返回序列iterable和可选参数start的综合
    a=(1,2,3)  sum(a)-->6整数或者小数
sorted()排序默认从小到大
reversed()从大到小排序
enumerate()返回一个值list(enumerate())返回列表中元祖,索引位置加上元素
zip():a=[1,2,3,4]  b=[5,6,7]  list(zip(a,b))-->[(1,5),(2,6),(3,7)]多余的不打包
def创建函数
形式参数(parameter) 形式参数(argument)
def n(name)
'函数定义过程中的name是叫做形参'
因为ta知识一个形式,表示占据一个参数位置
n(a)传递进来的a叫做实参
关键字参数:
    def name(a,b):
        print(a)
        print(b)
    name(1,2)-->1  2
    name(a=2,b=1)-->2  1
局部变量(Local Variable)全局变量(Global Variable)
在def中定义的变量就是局部变量
在函数内部修改全局变量是无效的
函数外不能饮用局部变量
关键字global将局部变量变成全局变量
def函数是可以嵌套的
闭包:函数面向的重要方式
关键字nonlocal声明不是局部变量
def funx(x):
    def funy(y):
        return x*y;
    return funy
a=funx(8)
print(a(5))
//fun(8)(5)
匿名函数:lambda
g=lambda x:2*x+1    g(5)-->11
filter默认过滤false和0
def odd(x):
    return c=x%2    //能被2整除的话,返回值为0
temp=range(10)-->1到10
show =filter(odd,temp)//过滤能被2整除的数
list(show)-->[1,3,5,7,9]
list(filter(lambda x:x %2,range(10)))-->匿名函数用法[1,3,5,7,9]
map()映射
list(map(lambda x:x*2,range))-->[0,2,4,6,8,10,12,14,16,18]
递归
import sys
sys.setrecursionlimit(1000000)//递归深度
阶乘:
    def number(n):
    if n==1:
        return 1
    else:
        return n*number(n-1)
print(number(0))
汉诺塔代码:
    def hnt(n,x,y,z):
        if n==1:
            print(x+"-->"+y)
        else:
            hnt(n-1,x,z,y)
            print(x+"-->"+z)
            hnt(n-1,y,x,z)
    n=int(input("层数"))
    print(hnt(n,"第一列","第二列","第三列"))
创建和访问字典:dict{}
dict1={'1':'1','2':'12','3':'123'}
print(dict1['3'])-->'123'
dict4=dict('a'='97','b'='98')
print(dict4)-->{'a':'97','b':'98'}
字典的修改:dict4['a']='99'
dict1={}
dict1.formkeys((1,2))-->{1:None,2:None}
dict1.formkeys((1,2),'1')-->{1:1,2:1}
dict1.formkeys((1,2),('1','2'))-->{1:('1','2'),2:('1','2')}
keys(),values(),items()
dict1=dict1.formkeys(range(3),'赞')
dict1-->{0:'赞',1:'赞',2:'赞'}
for eachKey in dict1.keys():
    print(eachKey)-->0  1  2
for eachValue in dict1.values():
    print(eachValue)-->赞  赞  赞
for eachItem in dict1.items():
    print(eachItem)-->(0,'赞')  (1,'赞')  (2,'赞')
print(dict1.get(3))-->None//没有的话不会报错,会打印None
print(dict1.get(3,"呵呵"))-->"呵呵"//没有的话打印"呵呵",有的话打印原值
2 in dict1-->True
3 in dict1-->False
dict1.clear()//清空字典
a={1:'1'}  b=a
a={}  b={1:'1'}
a.clear  a={}  b={}
c.copy()    //拷贝  id(a)==id(b)!=id(c)
如果对a/b的值进行改变,那么b/a的值也会发生改变,c的值不会发生改变
pop()的用法:
    pop(key[,default])
    key - 要删除的键default - 当键 key 不存在时返回的值
    如果 key 存在 - 删除字典中对应的元素,如果 key 不存在 - 返回设置指定的默认值 default,如果 key 不存在且默认值 default 没有指定 - 触发 KeyError 异常
popitem()
    返回并删除字典中的最后一对键和值。
dict.setdefault(key, default=None)
    和get()类似, 但如果键不存在于字典中,将会添加键并将值设为default
dict.update(dict2)
    把字典dict2的键/值对更新到dict里
集合的唯一性:集合中的元素都是唯一的
集合是无序的
内置函数set()创建集合
去除列表中的重复元素:
    num1=[1,2,3,4,5,5,3,1,0]
    temp=[]
    方法一:
        for each in num1:
            if each not in temp:
                temp.append(each)
    方法二:num1=list(set(num1))
.add()添加元素  .remove()删除元素
不可变集合:
    a=frozenset([1,2,3,4])
r:以只读方式打开文件(默认)
w:以写入的方式打开文件会覆盖已存在的文件
x:如果文件已经存在,用此模式打开将引发异常
a:以写入模式打开,如果文件存在,则在末尾追加写入
b:以二进制模式打开文件
t:以文本模式打开(默认)
+:可读写模式(可添加到其他模式中使用)
u:通用换行符支持
文件处理:
    f=open('E:\\Java.txt')
f.close()  关闭文件
f.read(size=-1)  从文件读取size个字符,当未给定size或给定负值的时候,读取剩余的所有字符,然后作为字符串返回
f.readline()  以写入模式打开,如果文件存在,则在末尾追加写入
f.weite(str)  将字符串str写入文件
f.writelines(seq)  像文件写入字符串序列seq,seq应该是一个返回字符串的可迭代对象
f.seek(offset,from)  在文件中移动文件指针,从from(0表示文件起始位置,1代表文件当前位置,2代表文件末尾)偏移offset个字节
f.tell()  返回当前在文件中的位置