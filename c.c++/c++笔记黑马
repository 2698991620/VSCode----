打印hello world:
    #include<iostream>
    using namespace std;
    int main()
    {
        cout << "hello world" << endl;
        system("pause");
        return 0;
    }
注释:
    作用:在代码中加一些说明和解释d,方便自己或其他程序员阅读代码
    两种格式
    1.单行注释:  //描述信息
        通常放在一行代码的上方d,或者一条语句的末尾d,对该代码说明
    2.多行注释:  /*描述信息*/
        通常放在一段代码的上方d,对该段代码做整体说明
    提示:编译器在编译代码时d,会忽略注释的内容
变量:
    作用:给一段指定的内存空间起名d,方便操作这段内存
    语法:数据类型  变量名  =  初始值;
    #include<iostream>
    using namespace std;
    int main()
    {
        //变量的定义
        //语法:数据类型  变量名  =  初始值
        int a = 10;
        cout << "a=" << a << endl;
        system("pause");
        return 0;
        /*main是一个程序入口
        每个程序必须有这么一个函数
        有且仅有一个
        */
    }
常量:
    作用:用于记录程序中不可更改的数据
    c++定义常量的两种方式
    1.#define  宏常量:  #define  常量名  常量值
        通常在文件上方定义d,表示一个常量
    2.const修饰的常量:  const  数据类型  常量名  =  常量值
        通常在定义前加关键字constd,修饰该变量为常量d,不可修改
    //1.宏常量
    #include<iostream>
    using namespace std;

    //常量的定义方式
    //1.#define  宏常量
    //2.const  修饰的变量

    #define Day 7
    int main()
    {
        //Day = 14;常量d,不能修改
        cout << "一周总共有:" << Day << "天" << endl;
        //2.const修饰的变量
        const int month = 12;
        //month = 24;const修饰的变量也称为常量
        cout << "一年总共有:" << month << "个月份" << endl;
        system("pause");
        return 0;
    }
在给变量命名的时候d,不能使用关键字
标识符的命名规则
作用:c++规定给标识符(变量、常量)命名时d,有一套自己的规则
标识符不能是关键字
标识符只能由字母、数字、下划线组成
第一个字符必须为字母或下划线
标识符中字母区分大小写
建议:给标识符命名时d,争取做到见名知意的效果d,方便自己和他人的阅读
整形:
    数据类型            占用空间                                    取值范围
    short(短整型)      2字节                                        (-2^15~2^15-1)
    int(整形)          4字节                                        (-2^31~2^31-1)
    long(长整型)       windows为4字节d,Linux为4字节(32位)8字节(64位)  (-2^31~2^31-1)
    long long(长长整形)8字节                                         (-2^63~2^63-1)
sizeof关键字
    作用:利用sizeof关键字可以统计数据类型所占内存的大小
    语法:sizeof(数据类型/变量)
    float-->4字节
    double-->8字节
字符型:
    char字符型只占1个字节
    不能用双引号d,单引号中一个字符
    字符型变量不是吧字符本身放到内存中存储d,而是将ASCII编码放入到存储单元
字符型变量对应的ASCII值:
    char ch='a';
    cout<<(int)ch<<endl;
ASCII码大致由以下两部分组成:
    ASCII非打印控制字符:ASCII表上的数字0-31分配给了控制字符d,用于控制像打印机等一些外围设备
    ASCII打印字符:数字32-126分配给了能在键盘上找到的字符d,当查看或打印文档时就会出现
转义字符:
    作用:用于表示一些不能显示出来的ASCII字符
    转义字符    含义                  ASCII码值(十进制)
    \a          报警                        007
    \b    退格(BS)d,将当前位置移到前一列      008
    \f    换页(FF)d,将当前位置移到下一页开头  008
    \n    换行(LF)d,将当前位置移到下一行开头  012
    \r    回车(CR)d,将当前位置移到本行开头    010
    \t    水平制表(HT)(跳到下一个TAB位置)    013---->8个字符一个单位
    \v    垂直制表(VT)                      011
    \\    表示一个反斜线"\"                  092
    \'    表示一个单引号'(撇号)字符          039
    \"    表示一个双引号字符"                034
    \?    表示一个问好                      063
    \0    数字0                            000
    \ddd  8进制转义字符d,d范围0-7            3位8进制
    \xhh  16进制转义字符d,h范围A-F          3位16进制
字符串型
    作用:用于表示一串字符
    1.C语言风格字符串:char 变量名[]="字符串值"双引号括起来
    2.C++语言风格字符串:string 变量名="字符串值"-->输出字符串需要引用头文件:#include<string>
布尔类型bool
    作用:布尔数据类型代表真或者假的值
    true 1  false 0
    bool类型所占用的内存空间为1
数据的输入:
    关键字:cin
    语法:cin >> 变量
    改变:string str ="hello";    cin>>str;
    bool类型赋值d,除了假(0)d,都为真(1)
运算符:
    运算符类型    作用
    算术运算符    用于处理四则运算
    赋值运算符    用于将表达式的赋值
    比较运算符    用于表达式的比较d,并返回一个真值或假值
    逻辑运算符    用于根据表达式的值返回真值或假值
    ++  前置递增b=++a先递增(表达式运算)再赋值d,后置递增b=a++先赋值(表达式运算)再递增
    --  前置递减b=--a先递减(表达式运算)再赋值d,后置递增b=a++先赋值(表达式运算)再递减
    整数相除依旧是整数
    除数不能为0
    小数不能做取模运算
赋值运算符:=、+=、-=、*=、/=、%=
比较运算符:==、!=、<、>、>=、<=
    返回值是0或1
    ()可以提高运算的优先级
逻辑运算符:!(非d,结果取反)、&&(与d,同时为真结果为真)、||(或d,一个为真结果为真)
程序流程结构:
顺序结构d,选择结构d,循环结构
循序结构:程序按顺序执行d,不发生跳转
选择结构:依据条件是否满足d,有选择的执行相应功能
循环结构:依据条件是否满足d,循环多次执行某段代码
if语句:单行格式if语句d,多行格式if语句d,多条件的if语句
    1.单行格式if语句
    //1.用户输入分数
    int score=0;
    cout << "请输入一个分数:" << endl;
    cin >>score;
    //2.打印用户输入的分数
    cout << "您输入的分数是:" <<score << endl;
    //3.判断分数是否大于600d,如果大于d,那么输出
    //注意事项d,if条件后面不要加分号
    if(score>600)
    {
        cout << "恭喜您考上了一本大学" <<endl;
    }
    2.多行格式if语句
    //选择结构-多行格式if语句
    //输入考试的分数d,如果分数大于600d,视为考上一本大学d,在屏幕上输出
    //如果没考上一本大学d,打印未考上一本大学
    //1.请输入考试分数
    int score=0;
    cout << "请输入一个分数:" << endl;
    cin >>score;
    //2.提示用户输入分数
    cout << "您输入的分数是:" <<score << endl;
    //3.判断
    if(score>600)
    {
        cout <<"恭喜考上了一本大学"<<endl;
    }
    else
    {
        cout<<"未考上一本大学"<<endl;
    }
    3.多条件的if语句
    if(score>600)
    {
        cout <<"恭喜考上了一本大学"<<endl;
    }else if(score>500)
    {
        cout <<"恭喜考上了二本大学"<<endl;
    }else if(score>400)
    {
        cout <<"恭喜考上了三本大学"<<endl;
    }else
    {
        cout <<"没有考上本科大学"<<endl;
    }
三目运算符
    //三目运算符
    //创建三个变量ad,bd,c
    //将a和b作比较d,将变量大的值复制给变量c
    int a=10;
    int b=20;
    int c=0;
    c=(a>b?a:b);
    //在c++中三目运算符返回的是变量d,可以继续赋值
    (a>b?a:b)=100;
switch
    作用:执行多条件分支语句
    switch(表达式)
    {
        case 结果1:
            执行语句;
            break;
        case 结果2:
            执行语句;
            break;
        ……
        default:执行语句;break;
    }
while循环语句
    作用:满足循环条件d,执行循环语句
    while(循环条件){(循环语句)}
    //注意事项:避免死循环
猜数字
    //1.系统生成随机数
    rand()%100-->生成0~99的随机数
    int num =rand()%100+1;
    //添加随机数种子，作用利用当前系统时间生成随机数，防止每次随机数都一样
    srand((unsigned int)time(NULL));
    头文件添加：#include <ctime>
do……while循环语句
    do{
    }
    while();
do……while语句先循环再判断
for循环语句
    作用：满足循环条件，执行表达语句
    for(起始表达式;条件表达式;末尾循环体){循环语句;}
    	for (int i = 0; i < 100; i++)
        {
            cout << i << endl;
        }
        system("pause");
    或者：
    	int i = 0;
        for (;; i++)
        {
            if (i>=100)
            {
                break;
            }
            cout << i << endl;
            i++;
        }
        system("pause");
    for循环的条件可以放在外面
cout<<"*"<<endl;-->endl是换行
打印5*5的"*"
    	for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                cout << "*";
            }
            cout << endl;
        }
    或者：
        for (int i = 0; i < 5; i++)
        {
            for (int i = 0; i < 5; i++)
            {
                cout << "*";
                cout << i;//就近原则
            }
            cout << endl;
        }
        i是局部变量
九九乘法表
    for (int i = 1; i < 10; i++)
	{
		for (int j = 1; j <=i; j++)
		{
			cout << i << "*" << j << "=" << i*j << "    ";
		}
		cout << endl;
	}
跳转语句:break语句
    break语句的使用时机:
        1.出现在switch条件语句中，作用是终止case并跳出switch
        2.出现在循环语句中，作用是跳出当前的循环语句
        3.出现在嵌套循环中，跳出最近的内层循环语句
        注意：退出内层循环
continue
    作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次代码
goto语句
    作用：可以无条件
    goto 标记;
    标记：
    实例：
    cout << "1" << endl;
	cout << "2" << endl;
	goto D;
	cout << "3" << endl;
	cout << "4" << endl;
	D:
	cout << "5" << endl;
数组
    1.数据类型 数组名[数组长度];
    2.数据类型 数组名[数组长度] = {值1，值2……};
    3.数据类型 数组名[]={值1，值2……};
sizeof统计占用内存的长度
sizeof(数组名[索引])某元素的内存占用长度
数组的首地址：cout << 数组名 << endl;
元素个数获取：sizeof(数组名)/sizeof(数组名[0])-->整个占用空间/单个占用空间
首地址获取:cout << (int)数组名 << endl;//地址的差距就是数据内存的差距。int类型的数据，一个占用内存4字节
数组中单个元素的地址:cout << (int)&数组名[索引] << endl;//访问元素地址需要加上&
数组名是一个常量，不可以进行赋值操作
数组导致
    #include <iostream>
    using namespace std;

    int main1() {
        //创建数组
        int arr[5] = { 1, 3, 2, 5, 4 };
        cout << "数组逆置前：" << endl;
        for (int i = 0; i <5; i++)
        {
            cout << arr[i];
        }
        cout << endl;
        int start = 0;//起始下标
        int end = sizeof(arr) / sizeof(arr[0]) - 1;//结束下标
        while (start<end)
        {
            //实现元素互换
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            //下标更新
            start++;
            end--;
        }
        //打印逆置后的数组
        cout << "数组逆置后：" << endl;
        for (int i = 0; i < 5; i++)
        {
            cout << arr[i] << end;
        }
        system("pause");
        return 0;
    }
将数组升序排序
    #include <iostream>
    using namespace std;

    int main() {
        int arr[9] = { 9, 8, 7, 6, 5, 4, 3, 2, 1 };
        for (int i = 0; i < 9; i++)
        {
            cout << arr[i];
        }
        cout << endl;
        int cs;
        do
        {
            cs = 0;
            for (int i = 0; i < 8; i++)
            {
                if (arr[i]>arr[i+1])
                {
                    int temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                    cs++;
                }
            }
        } while (cs!=0);
        for (int i = 0; i < 9; i++)
        {
            cout << arr[i] ;
        }
        system("pause");
        return 0;
    }
冒泡排序
    int arr[9] = { 9, 8, 7, 6, 5, 4, 3, 2, 1 };
	for (int i = 0; i < 9; i++)
	{
		cout << arr[i];
	}
	cout << endl;
	//开始冒泡排序
	//总共排序轮数为 元素个数-1
	for (int i = 0; i < 9 - 1; i++)
	{
		//内层循环对比 次数=元素个数-当前轮数-1
		for (int j = 0; j < 9-i-1; j++)
		{
			//如果第一个数字比第二个大，交换两个数字
			if (arr[j]>arr[j+1])
			{
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
	//排序后的结果
	cout << "排序后的结果" << endl;
	for (int i = 0; i < 9; i++)
	{
		cout << arr[i] ;
	}
	system("pause");
	return 0;
二维数组
    数据类型 数组名[列数][列数];
    数据类型 数组名[列数][列数]={{数据1,数据2},{数据3,数据4},{数据5,数据6}};
        int arr[2][3]=
        {
            {1,2,3},//二行三列
            {4,5,6}
        }
    数据类型 数组名[列数][列数]={数据1,数据2,数据3,数据4}
        int arr[2][3]={1,2,3,4,5,6}
    数据类型 数组名[][列数]={数据1,数据2,数据3,数据4};
        int arr[][3]={1,2,3,4,5,6}
二维数组的名称用途：
    1.可以查看占用内存空间大小
        总内存：sizeof(arr)
        第一行占用内存：sizeof(arr[0])
        第一个元素占用内存：sizeof(arr[0][0])
        行数：sizeof(arr)/sizeof(arr[0])
        列数：sizeof(arr[0])/sizeof(arr[0][0])
    2.可以查看二维数组的首地址
        arr//转换为十进制-->(int)arr
        第一行首地址：arr[0]
        第一个元素的首地址：arr&[0][0]
函数的定义：
    1.返回值类型：一个函数可以返回一个值，在函数定义中
    2.函数名：给函数起个名称
    3.参数列表：使用函数时，传入的数据
    4.函数体语句：花括号内的代码，函数内需要执行的语句
    5.return表达式：和返回值类型挂钩，函数执行完后，返回相应的数据
    返回值类型 函数名(参数列表)
    {
        函数体语句
        ruturn表达式
    }
    函数的调用：函数名(参数)
    //函数的定义
    //语法
    //返回值类型 函数名 (参数列表) {函数语句 return表达式}

    //加法函数，实现两个整形相加，并且将相加的结果进行返回
    //函数定义的时候，num1和num2并没有真实数据
    //他只是一个形式上的参数，简称形参
    int add(int num1, int num2)
    {
        int sum = num1 + num2;
        return sum;
    }
    int main() {
        //main函数中调用add函数
        int a = 10;
        int b = 20;
        //函数调用语法：函数名(参数)
        //a和b称为 实际参数，简称实参
        //调用函数时，实参的值会传递给形参
        int c = add(a, b);
        system("pause");
        return 0;
    }
值传递
    所谓值传递，就是函数调用时将数值传入给形参
    值传递时，如果形参发生改变，并不会影响实参
    //值传递
    //定义函数，实现两个数字进行交换函数

    //如果函数不需要返回值，声明的时候可以写void

    void swap(int num1, int num2)
    {
        int temp = num1;
        num1 = num2;
        num2 = temp;
        cout << num1 << "    " << num2;
        return;//返回值不需要的时候，可以不写return
    }
    int main() {
        int a = 10;
        int b = 20;
        //我们做值传递的时候，函数的形参发生改变，并不会影响实参
        swap(a, b);
        system("pause");
        return 0;
    }
1.无参无返
    void test01()
    {
        cout<<"test01"<<endl;
    }
2.有参无返
    void test02(int a)
    {
        cout<<"test02 a="<<a<<endl;
    }
3.无参有返
    int test03()
    {
        cout <<"test03"<<endl;
        return 1000;
    }
    int num1=test03;
4.有参有返
    int test04(int a)
    {
        cout<<"test04 a="<<a<<endl;
        return a;
    }
    int num2=test04(1000);
变量的声明
    //函数的声明
    //比较函数，实现两个整型数字的比较，返回较大的值
    int max(int a,intb)
    {
        return a>b?a:b;
    }
    //提前告诉编译器函数的存在，可以利用函数的声明
    //函数的声明
    //声明可以有多次，但是定义只能由一次
    int max(int a,int b)//可以将函数体往后写，先声明
函数分文件写
    作用：让代码更加清晰
    函数分文件编写一般有4步骤
    1.创建后缀名位.h的头文件
    2.创建后缀名为.cpp的源文件
    3.在头文件中写函数的声明，在源文件中写函数的定义
    4.在源文件中写函数的定义
    swap.cpp文件内容：
        #include "swap.h"
        //函数的定义
        void swap(int a, int b)
        {
            int temp = a;
            a = b;
            b = temp;
            cout << "a=" << a << endl;
            cout << "b=" << b << endl;
        }
    swap.h文件内容：
        #include <iostream>
        using namespace std;
        //函数的声明
        void swap(int a, int b);
    运行文件中的内容：
        #include <iostream>
        using namespace std;
        #include "swap.h"

        int main() {
            int a = 10;
            int b = 20;
            swap(a, b);
            system("pause");
            return 0;
        }
指针：
    1.定义指针
    int a=10；
    //指针定义的语法：数据类型*指针变量名;
    int *p;
    //让指针记录变量a的地址
    p=&a;
    //2.使用指针
    //可以通过解引用的方式来找到指针指向的内存
    //指针前面加*表示解引用，找到指针指向的内存中的数据
    *p=1000;//a=1000
指针所占的内存空间
    //指针所占的内存空间
    int a=10;
    //int *p;
    //p=&a;
    int *p=&a;
    //在32位操作系统下，指针是占4字节孔吉纳大小，不管是什么数据类型
    //在64位操作系统下，指针是占8字节孔吉纳大小，不管是什么数据类型
    cout <<"sizeof(int*)"<<sizeof(p)<<endl;
    cout <<"sizeof(int*)"<<sizeof(int*)<<endl;
    cout <<"sizeof(int*)"<<sizeof(float*)<<endl;
    cout <<"sizeof(int*)"<<sizeof(double*)<<endl;
    cout <<"sizeof(int*)"<<sizeof(char*)<<endl;
空指针和野指针
    空指针：指针变量指向内存中编号为0的空间
    用途：胡世华指针变量
    注意：空指针指向的内存是不可以访问的
    //空指针
    //1.空指针用于给指针变量进行初始化
    int*p=NULL;
    //2.空指针是不可以进行访问的
    //0~255之间的内存编号是系统占用的，因此不可以访问
    野指针：指针变量指向非法的内存空间
    //野指针
    //在程序中，尽量避免出现野指针
    int *p=(int *)0x1100;
    cout<<*p<<endl;
const修饰指针
    1.常量指针
        const int*p=&a;
        特点：指针指向可以改，指针指向的值不可以改
        *p=20  错误，指针指向的值不可以改
        p=&b  正确，指针指向(地址)可以改
        int a=10;
        int b=10;
        const int *p=&a;
        //*p=20;错误
        p=&b;//正确
    2.指针常量
        int*const p=&A;
        特点：指针指向不可以该，指针指向的值不可以改
        *p=20  正确，指向的值可以改
        p=&b  错误，指针指向不可以改
        int *const p2=&a
        *p=100;//正确
        //p2=&b;错误
    3.const即修饰指针，又修饰常量
        const int *const p=&a;
        特点：指针的指向和指针指向的值都不可以改
        *p=20  错误
        p=&b  错误
        const int *const p3=&a;
        //*p3=100;
        //p3=*b
指针访问数组：
    int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int *p = arr;//指向数组的指针
	cout << "第一个元素" << arr[0] << endl;
	cout << "指针访问第一个元素" << *p << endl;
	for (int i = 0; i < 10; i++)
	{
		//利用指针遍历数组
		cout << *p << "  ";
		p++;
	}
指针和函数：
    #include <iostream>
    using namespace std;
    void swap(int *p, int *p2)
    {
        int temp = *p;
        *p = *p2;
        *p2 = temp;
    }
    int main(){
        //地址传递
        //如果是地址传递，可以修饰实参
        int a = 10;
        int b = 20;
        swap(&a, &b);
        cout << "a=" << a << endl;
        cout << "b=" << b << endl;
        system("pause");
        return 0;
    }
    如果不想修改实参，就用值传递。如果想修改实参，就用地址传递
指针配合数组和函数
    #include <iostream>
    using namespace std;
    void paixu(int *arr, int len)
    {
        for (int i = 0; i < len-1; i++)
        {
            for (int j = 0; j < len-i-1; j++)
            {
                //如果j>j+1的值，交换数字
                if (arr[j]>arr[j+1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    void printarr(int *arr, int len)
    {
        for (int i = 0; i < len; i++)
        {
            cout << arr[i] << "  ";
        }
        cout << endl;
    }
    int main(){
        //创建数组
        int arr[10] = { 4, 3, 6, 9, 1, 2, 10, 8, 7, 5 };
        //数组长度
        int len = sizeof(arr) / sizeof(arr[0]);
        //创建函数
        printarr(arr, len);
        paixu(arr, len);
        printarr(arr,len);
        system("pause");
        return 0;
    }
结构体：
    结构体属于用户自定义的数据类型，允许用户存储不同的数据类型
    语法： struct 结构体名{结构体成员列表}
    #include <iostream>
    using namespace std;
    #include <string>

    //1.创建学生数据类型：学生包括(姓名，年龄，分数)
    //自定义数据欸行，一些类型集合组成的一个类型
    //语法 struct 类型名称{成员列表}
    struct Student
    {
        //成员列表
        //姓名
        string name;
        //年龄
        int age;
        //分数
        int score;
    }s3;//结构体创建变量3
    int main(){
        //通过学生类型来创建具体学生
        //1.struct Student s1
        //结构体创建变量的时候，struct可以省略
        struct Student s1;
        //给s1属性赋值，通过.来访问结构体变量中的变量
        s1.name = "张三";
        s1.age = 18;
        s1.score = 100;
        cout << "姓名：" << s1.name << "年龄：" << s1.age << "分数：" << s1.score << endl;
        //2.struct Student s2={……}
        struct Student s2 = { "李四", 19, 80 };
        cout << "姓名：" << s2.name << "年龄：" << s2.age << "分数：" << s2.score << endl;
        //3.创建结构体是戍边创建结构体变量
        s3.name = "王五";
        s3.age = 20;
        s3.score = 60;
        system("pause");
        return 0;
    }
结构体数组
    作用：将自定义的结构体放入到数组中方便维护
    语法：struct 结构体名 数组名[元素个数] ={{},{},{}....{}}
    //结构体数组
    //1.定义结构体数组
    //2.创建结构体数组
    //3.给结构体中的元素赋值
    //4.遍历结构体数组
    struct Student
    {
        //成员列表
        //姓名
        string name;
        //年龄
        int age;
        //分数
        int score;
    };
    int main(){
        //2.创建结构体数组
        struct Student stuArray[3]=
        {
            { "张三",18,100 },
            { "李四" ,28,99},
            { "王五",38,66 }
        };
        //3.给结构体数组中的元素赋值
        stuArray[2].name = "赵六";
        stuArray[2].age = 80;
        stuArray[2].score = 60;
        //4.遍历结构体数组
        for (int i = 0; i < 3; i++)
        {
            cout << "姓名：" << stuArray[i].name 
                << "年龄：" << stuArray[i].age 
                << "分数：" << stuArray[i].score << endl;
        }
        system("pause");
        return 0;
    }
结构体指针
    作用：通过指针访问结构体中的成员
    利用操作符->
    //结构体指针
    //定义学生结构体
    struct student
    {
        //成员列表
        string name;//姓名
        int age;//年龄
        int score;//分数
    };
    int main(){
        //1.创建结构体数组
        struct student s = { "张三", 18, 100 };
        //2.通过指针指向变量
        struct student *p = &s;//struct可以省略
        //3.通过指针访问结构体变量中的数据,需要利用'->'
        cout << "姓名：" << p->name 
            << "年龄：" << p->age 
            << "分数" << p->score << endl;
        system("pause");
        return 0;
    }
结构体的嵌套
    //结构体指针
    //定义学生结构体
    struct student
    {
        //成员列表
        string name;//姓名
        int age;//年龄
        int score;//分数
    };
    struct teacher
    {
        int id;//教师编号
        string name;//教师姓名
        int age;//年龄
        struct student stu;//辅导的学生
    };
    int main(){
        //结构体嵌套结构体
        //创建了老师
        teacher t;
        t.id = 10000;
        t.name = "老王";
        t.age = 20;
        t.stu.name = "小王";
        t.stu.age = 20;
        t.stu.score = 60;
        cout << "老师的姓名：" << t.name
            << "老师的编号：" << t.id
            << "老师的年龄：" << t.age
            << endl << "老师辅导的学生的姓名：" << t.stu.name
            << "老师辅导的学生的年龄：" << t.stu.age
            << "老师辅导的学生的成绩：" << t.stu.score << endl;
        system("pause");
        return 0;
    }
结构体做函数
    //定义学生结构体
    struct student
    {
        //成员列表
        string name;//姓名
        int age;//年龄
        int score;//分数
    };
    //打印学生信息函数
    //1.值传递，修改形参，值不会改变
    void printStudent1(struct student s)
    {
        //s.age=200;
        cout << "子函数中 姓名：" << s.name
            << "年龄：" << s.age
            << "分数：" << s.score
            << endl;
    }
    void printStudent2(struct student *p)//2.地址传递，修改形参，值会改变
    {
        //p-->age=200;
        cout << "子函数中 姓名：" << p->name
            << "年龄：" << p->age
            << "分数：" << p->score
            << endl;
    }
    int main(){
        //结构体做函数参数
        //将学生传入到一个参数中，打印学生身上所有的信息
        //创建结构体变量
        struct student s;
        s.name = "张三";
        s.age = 20;
        s.score = 100;
        cout << "main函数中打印 姓名：" << s.name
            << "年龄：" << s.age
            << "分数：" << s.score
            << endl;
        printStudent1(s);
        printStudent2(&s);
        system("pause");
        return 0;
    }
结构体中const使用场景
    作用：用const来防止误操作
    //const的使用场景
    struct student
    {
        //成员列表
        string name;//姓名
        int age;//年龄
        int score;//分数
    };
    //将函数中的形参改为指针，可以减少内存空间，而且不会赋值新的副本出来
    void printStudents(const student *s)
    {
        //s->age = 150;//加入conts之后，一旦有修改的操作就会报错，可以防止我们的误操作
        cout << "姓名：" << s->name
            << "年龄：" << s->age
            << "得分：" << s->score
            << endl;
    }
    int main(){
        //创建结构体变量
        struct student s = { "张三", 18, 70 };
        printStudents(&s);
        system("pause");
        return 0;
    }
结构体案例1：
    #include <iostream>
    using namespace std;
    #include <string>
    #include <ctime>//头文件

    //const的使用场景
    struct Student
    {
        //成员列表
        string sName;//姓名
        int score;//分数
    };
    struct Teacher
    {
        string tName;//姓名
        struct Student sArray[5];
    };
    //给老师和学生赋值的函数
    void allocateSpace(struct Teacher tArray[], int len)
    {
        string nameSeed = "ABCDE";
        //给老师开始赋值
        for (int i = 0; i < len; i++)
        {
            tArray[i].tName = "Teacher_";
            tArray[i].tName += nameSeed[i];
            //通过循环给每名老师所带的学生赋值
            for (int j = 0; j < 5; j++)
            {
                tArray[i].sArray[j].sName = "Student_";
                tArray[i].sArray[j].sName += nameSeed;
                //分数随机值
                int random = rand() % 60 + 40;//40~99
                tArray[i].sArray[j].score = random;
            }
        }
    }
    //打印所有信息
    void printInfo(struct Teacher tArray[], int len)
    {
        for (int i = 0; i < len; i++)
        {
            cout << "老师姓名：" << tArray[i].tName << endl;
            for (int j = 0; j < 5; j++)
            {
                cout << "\t学生姓名：" << tArray[i].sArray[j].sName
                    << "  考试分数：" << tArray[i].sArray[j].score << endl;
            }
        }
    }
    int main(){
        //随机数种子
        srand((unsigned int)time(NULL));
        //创建三名老师的数组
        struct Teacher tArray[3];
        //给老师和学生的信息赋值
        int len = sizeof(tArray) / sizeof(tArray[0]);
        allocateSpace(tArray, len);
        //打印学生信息
        printInfo(tArray, len);
        system("pause");
        return 0;
    }
结构体案例2
    #include <iostream>
    using namespace std;
    #include <string>
    //1.创建一个英雄的结构体
    struct Hero
    {
        //姓名
        string name;
        //年龄
        int age;
        //性别
        string sex;
    };
    //冒泡排序，实现年龄升序排序
    void bubbleSort(struct Hero heroArray[], int len)
    {
        for (int i = 0; i < len; i++)
        {
            for (int j = 0; j < len-i-1; j++)
            {
                //如果j下标的元素年龄大于j+1下边元素的年龄，交换两个元素
                if (heroArray[j].age>heroArray[j+1].age)
                {
                    struct Hero temp = heroArray[j];
                    heroArray[j] = heroArray[j + 1];
                    heroArray[j + 1] = temp;
                }
            }
        }
    }
    //打印排序后数组中的信息
    void printHero(struct Hero heroArray[], int len)
    {
        for (int i = 0; i < len; i++)
        {
            cout << "姓名：" << heroArray[i].name << "年龄：" << heroArray[i].age << "性别：" << heroArray[i].sex << endl;
        }
    }
    int main(){
        //2.创建数组存放5名英雄
        struct Hero heroArray[5]=
        {
            { "刘备", 23, "男" },
            { "关羽", 22, "男" },
            { "张飞", 20, "男" },
            { "赵云", 21, "男" },
            { "貂蝉", 19, "女" }
        };
        int len = sizeof(heroArray) / sizeof(heroArray[0]);
        //3.对数组进行排序，按照年龄进行升序排序
        bubbleSort(heroArray, len);
        //4.将排序后结果打印输出
        printHero(heroArray,len);
        system("pause");
        return 0;
    }